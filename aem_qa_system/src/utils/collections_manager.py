# src/utils/collection_manager.py

from pymongo import MongoClient
from ..config import MONGO_CONNECTION_STRING, DB_NAME, SUPPORTED_LANGUAGE_PAIRS

class CollectionManager:
    """HTML Î∂ÑÎ¶¨Î•º ÏúÑÌïú Ïª¨Î†âÏÖò Í¥ÄÎ¶¨"""
    
    def __init__(self):
        self.client = MongoClient(MONGO_CONNECTION_STRING)
        self.db = self.client[DB_NAME]
    
    def create_separation_collections(self):
        """Î∂ÑÎ¶¨Ïö© Ïª¨Î†âÏÖòÎì§ ÏÉùÏÑ±"""
        created_collections = []
        
        for source_lang, target_lang in SUPPORTED_LANGUAGE_PAIRS:
            lang_suffix = f"{source_lang}_{target_lang}"
            
            # Clean TM Ïª¨Î†âÏÖò
            clean_name = f"clean_translation_memory_{lang_suffix}"
            self._create_clean_tm_collection(clean_name)
            created_collections.append(clean_name)
            
            # HTML Archive Ïª¨Î†âÏÖò  
            html_name = f"html_component_archive_{lang_suffix}"
            self._create_html_archive_collection(html_name)
            created_collections.append(html_name)
            
            # ÌÜµÍ≥Ñ Ïª¨Î†âÏÖò
            stats_name = f"tm_separation_stats_{lang_suffix}"
            self._create_stats_collection(stats_name)
            created_collections.append(stats_name)
        
        return created_collections
    
    def _create_clean_tm_collection(self, collection_name: str):
        """Clean TM Ïª¨Î†âÏÖò ÏÉùÏÑ± Î∞è Ïù∏Îç±Ïã±"""
        collection = self.db[collection_name]
        
        # Ïù∏Îç±Ïä§ ÏÉùÏÑ±
        collection.create_index([("source_text", "text")])
        collection.create_index("page_path")
        collection.create_index("component_path")
        collection.create_index([("text_quality_score", -1)])
        collection.create_index([("version_name", 1), ("version_number", -1)])
        collection.create_index([("page_path", 1), ("component_path", 1)])
        
        # ÏÑ∏Í∑∏Î®ºÌä∏ ÏàúÏÑú Ïù∏Îç±Ïä§ Ï∂îÍ∞Ä
        collection.create_index([("segment_index", 1)])
        collection.create_index([("original_component_order", 1), ("segment_index", 1)])
        collection.create_index([("is_segmented", 1)])
        
        print(f"‚úÖ Created Clean TM collection: {collection_name}")
    
    def _create_html_archive_collection(self, collection_name: str):
        """HTML Archive Ïª¨Î†âÏÖò ÏÉùÏÑ± Î∞è Ïù∏Îç±Ïã±"""
        collection = self.db[collection_name]
        
        # Ïù∏Îç±Ïä§ ÏÉùÏÑ±
        collection.create_index("page_path")
        collection.create_index("component_path")
        collection.create_index("html_detection.html_complexity")
        collection.create_index("html_detection.detected_tags")
        collection.create_index([("version_name_source", 1), ("version_name_target", 1)])
        collection.create_index([("page_path", 1), ("component_path", 1)])
        
        print(f"‚úÖ Created HTML Archive collection: {collection_name}")
    
    def _create_stats_collection(self, collection_name: str):
        """ÌÜµÍ≥Ñ Ïª¨Î†âÏÖò ÏÉùÏÑ± Î∞è Ïù∏Îç±Ïã±"""
        collection = self.db[collection_name]
        
        # Ïù∏Îç±Ïä§ ÏÉùÏÑ±
        collection.create_index([("language_pair", 1), ("separation_date", -1)])
        collection.create_index([("separation_date", -1)])
        
        print(f"‚úÖ Created Stats collection: {collection_name}")
    
    def get_collection_info(self):
        """ÌòÑÏû¨ Ïª¨Î†âÏÖò Ï†ïÎ≥¥ Ï°∞Ìöå"""
        all_collections = self.db.list_collection_names()
        
        separation_collections = {
            "clean_tm": [c for c in all_collections if c.startswith("clean_translation_memory_")],
            "html_archive": [c for c in all_collections if c.startswith("html_component_archive_")],
            "stats": [c for c in all_collections if c.startswith("tm_separation_stats_")]
        }
        
        return separation_collections
    
    def verify_collection_structure(self, collection_name: str) -> Dict:
        """ÌäπÏ†ï Ïª¨Î†âÏÖòÏùò Íµ¨Ï°∞ Í≤ÄÏ¶ù"""
        collection = self.db[collection_name]
        
        # Ïù∏Îç±Ïä§ Ï†ïÎ≥¥
        indexes = list(collection.list_indexes())
        
        # ÏÉòÌîå Î¨∏ÏÑú Íµ¨Ï°∞
        sample_doc = collection.find_one({})
        
        # Î¨∏ÏÑú Ïàò
        doc_count = collection.count_documents({})
        
        return {
            "collection_name": collection_name,
            "document_count": doc_count,
            "index_count": len(indexes),
            "indexes": [idx.get("name", "unnamed") for idx in indexes],
            "sample_fields": list(sample_doc.keys()) if sample_doc else [],
            "has_data": doc_count > 0
        }
    
    def cleanup_old_collections(self, confirm: bool = False):
        """Í∏∞Ï°¥ TM Ïª¨Î†âÏÖò Ï†ïÎ¶¨ (Ï£ºÏùò: Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú)"""
        if not confirm:
            print("‚ö†Ô∏è Ïù¥ Ìï®ÏàòÎäî Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌï©ÎãàÎã§. confirm=TrueÎ°ú Ìò∏Ï∂úÌïòÏÑ∏Ïöî.")
            return
        
        # Í∏∞Ï°¥ TM Ïª¨Î†âÏÖòÎì§ Ï∞æÍ∏∞
        all_collections = self.db.list_collection_names()
        old_tm_collections = [
            c for c in all_collections 
            if c.startswith("translation_memory_") and not c.startswith("clean_translation_memory_")
        ]
        
        print(f"üóëÔ∏è Ï†ïÎ¶¨ ÎåÄÏÉÅ Ïª¨Î†âÏÖò: {len(old_tm_collections)}Í∞ú")
        
        for collection_name in old_tm_collections:
            # Î∞±ÏóÖ ÏÉùÏÑ± (ÏÑ†ÌÉùÏ†Å)
            backup_name = f"backup_{collection_name}_{datetime.now().strftime('%Y%m%d')}"
            
            # ÏõêÎ≥∏ÏùÑ Î∞±ÏóÖÏúºÎ°ú Ïù¥Î¶Ñ Î≥ÄÍ≤Ω
            self.db[collection_name].rename(backup_name)
            print(f"   - {collection_name} ‚Üí {backup_name} (Î∞±ÏóÖ)")
        
        print(f"‚úÖ Ï†ïÎ¶¨ ÏôÑÎ£å. Î∞±ÏóÖ Ïª¨Î†âÏÖòÎì§Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.")
    
    def get_storage_statistics(self) -> Dict:
        """Ï†ÄÏû•ÏÜå ÌÜµÍ≥Ñ Ï†ïÎ≥¥"""
        stats = {}
        
        # Î∂ÑÎ¶¨ Í¥ÄÎ†® Ïª¨Î†âÏÖòÎì§Ïùò ÌÅ¨Í∏∞ Ï†ïÎ≥¥
        separation_collections = self.get_collection_info()
        
        for category, collections in separation_collections.items():
            category_stats = []
            
            for collection_name in collections:
                collection = self.db[collection_name]
                doc_count = collection.count_documents({})
                
                # Ïª¨Î†âÏÖò ÌÅ¨Í∏∞ Ï†ïÎ≥¥ (MongoDB 4.4+)
                try:
                    collection_stats = self.db.command("collStats", collection_name)
                    size_bytes = collection_stats.get("size", 0)
                    avg_doc_size = collection_stats.get("avgObjSize", 0)
                except:
                    size_bytes = 0
                    avg_doc_size = 0
                
                category_stats.append({
                    "name": collection_name,
                    "document_count": doc_count,
                    "size_bytes": size_bytes,
                    "size_mb": round(size_bytes / 1024 / 1024, 2),
                    "avg_document_size": round(avg_doc_size, 2)
                })
            
            stats[category] = category_stats
        
        return stats