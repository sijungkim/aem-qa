# src/utils/batch_utils.py

import os
import math
import re
import pandas as pd

def create_text_file_batches(input_file: str, output_dir: str, batch_size: int = 500):
    """
    Í±∞ÎåÄÌïú .txt Î™©Î°ù ÌååÏùºÏùÑ ÏùΩÏñ¥ ÏûëÏùÄ Î∞∞Ïπò(.list) ÌååÏùºÎì§Î°ú Î∂ÑÌï†Ìï©ÎãàÎã§.
    """
    print(f"üîÑ ÌÖçÏä§Ìä∏ ÌååÏùº Î∞∞Ïπò ÏÉùÏÑ± Ï§ë: '{os.path.basename(input_file)}'")
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            lines = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        
        if not lines:
            print("   - ‚úÖ ÌååÏùºÏù¥ ÎπÑÏñ¥ÏûàÏñ¥ Ï≤òÎ¶¨Ìï† ÎÇ¥Ïö©Ïù¥ ÏóÜÏäµÎãàÎã§.")
            return

        total_batches = math.ceil(len(lines) / batch_size)
        print(f"   - Ï¥ù {len(lines)}Í∞ú Ìï≠Î™©ÏùÑ {total_batches}Í∞ú Î∞∞ÏπòÎ°ú Î∂ÑÌï†Ìï©ÎãàÎã§.")

        for i in range(total_batches):
            batch_lines = lines[i * batch_size : (i + 1) * batch_size]
            batch_filename = f"aem_batch_{i+1:03d}.list"
            batch_path = os.path.join(output_dir, batch_filename)
            with open(batch_path, 'w', encoding='utf-8') as bf:
                bf.write("\n".join(batch_lines))
        
        print(f"   - ‚úÖ AEM Î∞∞Ïπò ÌååÏùº {total_batches}Í∞ú ÏÉùÏÑ± ÏôÑÎ£å.")
    except Exception as e:
        print(f"   - ‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")

def create_csv_file_batches(input_file: str, output_dir: str, batch_size: int = 500):
    """
    Í±∞ÎåÄÌïú .csv Î™©Î°ù ÌååÏùºÏùÑ ÏùΩÏñ¥ ÏûëÏùÄ Î∞∞Ïπò(.csv) ÌååÏùºÎì§Î°ú Î∂ÑÌï†Ìï©ÎãàÎã§.
    Ïñ∏Ïñ¥ ÏåçÏùÄ ÏûÖÎ†• ÌååÏùºÎ™ÖÏóêÏÑú ÏûêÎèôÏúºÎ°ú Ï∂îÏ∂úÌï©ÎãàÎã§.
    
    Args:
        input_file: ÏûÖÎ†• CSV ÌååÏùº Í≤ΩÎ°ú (Ïòà: pdf_list_master_en_ko.csv)
        output_dir: Ï∂úÎ†• ÎîîÎ†âÌÜ†Î¶¨
        batch_size: Î∞∞Ïπò ÌÅ¨Í∏∞
    """
    # ÌååÏùºÎ™ÖÏóêÏÑú Ïñ∏Ïñ¥ Ïåç Ï∂îÏ∂ú
    language_pair = _extract_language_pair_from_filename(input_file)
    if not language_pair:
        print(f"‚ùå ÌååÏùºÎ™ÖÏóêÏÑú Ïñ∏Ïñ¥ ÏåçÏùÑ Ï∂îÏ∂úÌï† Ïàò ÏóÜÏäµÎãàÎã§: {os.path.basename(input_file)}")
        print("   ÏòàÏÉÅ ÌååÏùºÎ™Ö ÌòïÏãù: pdf_list_master_en_ko.csv")
        return
        
    source_lang, target_lang = language_pair
    filename_suffix = f"{source_lang}_{target_lang}"
    
    print(f"üîÑ CSV ÌååÏùº Î∞∞Ïπò ÏÉùÏÑ± Ï§ë: '{os.path.basename(input_file)}' ({source_lang.upper()}-{target_lang.upper()})")
    
    try:
        # Ï∂úÎ†• ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
        os.makedirs(output_dir, exist_ok=True)
        
        df = pd.read_csv(input_file)
        if df.empty:
            print("   - ‚úÖ ÌååÏùºÏù¥ ÎπÑÏñ¥ÏûàÏñ¥ Ï≤òÎ¶¨Ìï† ÎÇ¥Ïö©Ïù¥ ÏóÜÏäµÎãàÎã§.")
            return

        total_batches = math.ceil(len(df) / batch_size)
        print(f"   - Ï¥ù {len(df)}Í∞ú Ìï≠Î™©ÏùÑ {total_batches}Í∞ú Î∞∞ÏπòÎ°ú Î∂ÑÌï†Ìï©ÎãàÎã§.")

        for i in range(total_batches):
            batch_df = df.iloc[i * batch_size : (i + 1) * batch_size]
            batch_filename = f"pdf_batch_{filename_suffix}_{i+1:03d}.csv"
            batch_path = os.path.join(output_dir, batch_filename)
            batch_df.to_csv(batch_path, index=False, encoding='utf-8-sig')
        
        print(f"   - ‚úÖ PDF Î∞∞Ïπò ÌååÏùº {total_batches}Í∞ú ÏÉùÏÑ± ÏôÑÎ£å.")
        
    except FileNotFoundError:
        print(f"   - ‚ùå ÏûÖÎ†• ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: {input_file}")
    except pd.errors.EmptyDataError:
        print(f"   - ‚ùå CSV ÌååÏùºÏù¥ ÎπÑÏñ¥ÏûàÍ±∞ÎÇò ÌòïÏãùÏù¥ ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§: {input_file}")
    except Exception as e:
        print(f"   - ‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")

def _extract_language_pair_from_filename(filepath: str) -> tuple:
    """
    ÌååÏùºÎ™ÖÏóêÏÑú Ïñ∏Ïñ¥ ÏåçÏùÑ Ï∂îÏ∂úÌï©ÎãàÎã§.
    
    Args:
        filepath: ÌååÏùº Í≤ΩÎ°ú
        
    Returns:
        tuple: (source_lang, target_lang) ÎòêÎäî None
        
    Examples:
        pdf_list_master_en_ko.csv -> ('en', 'ko')
        pdf_list_master_en_ja.csv -> ('en', 'ja')
        other_file.csv -> None
    """
    filename = os.path.basename(filepath)
    
    # Ïñ∏Ïñ¥ Ïåç Ìå®ÌÑ¥ Îß§Ïπ≠ (en_ko, en_ja Îì±)
    pattern = r'_([a-z]{2})_([a-z]{2})\.csv$'
    match = re.search(pattern, filename)
    
    if match:
        source_lang = match.group(1)
        target_lang = match.group(2)
        return (source_lang, target_lang)
    else:
        return None