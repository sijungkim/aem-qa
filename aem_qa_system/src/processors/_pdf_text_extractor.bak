import fitz  # PyMuPDF
import requests

class PDFTextExtractor:
    """PDF에서 텍스트를 추출하고 의미 단위로 분할하는 클래스"""

    def llama3_generate(self, prompt: str, max_tokens: int = 512) -> str:
        response = requests.post(
            "http://localhost:11434/api/generate",
            json={
                "model": "llama3",
                "prompt": prompt,
                "options": {
                    "num_predict": max_tokens
                }
            },
            stream=True
        )

        output = ""
        for chunk in response.iter_lines():
            if chunk:
                data = chunk.decode("utf-8")
                if '"response":"' in data:
                    text = data.split('"response":"')[1].split('"')[0]
                    output += text
        return output.strip()

    def _split_with_llm(self, text: str) -> list[str]:
        prompt = f"""다음 텍스트를 의미 단위로 나눠줘. 각 단락은 리스트 항목처럼 줄바꿈으로 구분해줘.

{text}
"""
        response = self.llama3_generate(prompt)
        segments = [line.strip("-•● ") for line in response.split("\n") if line.strip()]
        return [s for s in segments if len(s) > 5]

    def extract_text_from_pdf(self, pdf_path: str) -> str:
        doc = fitz.open(pdf_path)
        full_text = ""
        for page in doc:
            full_text += page.get_text()
        return full_text.strip()

    def extract_segments_from_pdf(self, pdf_path: str) -> list[str]:
        text = self.extract_text_from_pdf(pdf_path)  # ✅ self. 붙여야 텍스트 추출됨
        if not text or len(text.strip()) < 30:
            print(f"⚠️ 텍스트 추출 실패 또는 너무 짧음: {pdf_path}")
            return []
        segments = self._split_with_llm(text)  # ✅ self. 붙여야 LLM 호출됨
        return segments
